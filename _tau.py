from typing import Callable, Iterator

import numpy as np


def get_tau_series(
    tau_series_generator: Callable[..., Iterator[float]],
    *,
    sigma: float = 1e-3,
    hurst: float = 0.5,
    tau_0: float = 0.5,
    boundary: float = 1e-3,
    n_points: int = 262144,
    seed: int = -1,
) -> np.ndarray:
    """Obtain inter-event time series (in event time space) as an array.

    Inter-event time series models are implemented as generators. This
    function acts as a generic intermediary, which extracts series from
    a selected inter-event time generator.

    Input:
        tau_series_generator:
            Generator to use when generating the series. Use generators
            defined in this module or use their code to build your own
            (e.g., see `markovian_beta` submodule).
        sigma: (default: 1e-3)
            Sigma parameter of the iterative equation driving the
            process.  Sigma parameter controls how fast the inter-event
            time values change.
        hurst: (default: 0.5)
            Hurst index of the inter-event time series. If driving noise
            is not fractional Gaussian noise, then this is an effective
            Hurst index (the "faking" process should still generate the
            same stationary inter-event time distribution as the process
            with fGn).
        tau_0: (default: 0.5)
            Initial condition for the inter-event time series.
        boundary: (default: 1e-3)
            Fine-tunes soft boundary conditions the process is allowed
            to approach. Inter-event times confined to interval
            [0+boundary, 1-boundary].
        n_points: (default: 262144)
            The desired length of the inter-event time series. Note that
            the length applies to the event time space (k-space) and not
            physical time space. It is advisable to use numbers which
            would be powers of 2.
        seed: (default: -1)
            RNG seed. If negative value is passed (which is the
            default), then seed will be randomly generated by
            `np.random.rand(2**20)`.

    Output:
        A numpy array of length `n_points` containing sample inter-event
        time series.

    Examples:
        ```
        >> from taudiff import get_tau_series, beta_model
        >> series = get_tau_series(beta_model, sigma=1e-2,
            hurst=0.75, n_points=16, seed=123)
        >> print(series)
            [0.48914 0.49911 0.50194 0.48688 0.48109 0.49760
             0.47333 0.46903 0.48168 0.47301 0.46622 0.46526
             0.48016 0.47377 0.46932 0.46497]
        ```
    """
    return np.fromiter(
        tau_series_generator(
            sigma=sigma,
            hurst=hurst,
            tau_0=tau_0,
            n_points=n_points,
            boundary=boundary,
            seed=seed,
        ),
        float,
    )
