from typing import Iterator

import numpy as np

from ._fgn import generate_fgn


def tau_series_generator(
    *,
    sigma: float = 1e-3,
    hurst: float = 0.5,
    tau_0: float = 0.5,
    boundary: float = 1e-3,
    n_points: int = 262144,
    seed: int = -1,
) -> Iterator[float]:
    """Generate inter-event time series (in event time space).

    Implementation of a fractional point process:
        tau[k+1] = tau[k] + sigma * epsi_H[k] ,
    where tau_i is the coordinate of the point process (inter-event
    time) and epsi_H[k] is a sample of fractional Gaussian noise. The
    process is confined to [0+boundary, 1-boundary] interval.

    Input:
        sigma: (default: 1e-3)
            Sigma parameter of the iterative equation driving the
            process.  Sigma parameter controls how fast the inter-event
            time values change.
        hurst: (default: 0.5)
            Hurst index of the inter-event time series. If driving noise
            is not fractional Gaussian noise, then this is an effective
            Hurst index (the "faking" process should still generate the
            same stationary inter-event time distribution as the process
            with fGn).
        tau_0: (default: 0.5)
            Initial condition for the inter-event time series.
        boundary: (default: 1e-3)
            Fine-tunes soft boundary conditions the process is allowed
            to approach. Inter-event times are confined to interval
            [0+boundary, 1-boundary].
        n_points: (default: 262144)
            The desired length of the inter-event time series. Note that
            the length applies to the event time space (k-space) and not
            physical time space. It is advisable to use numbers which
            would be powers of 2.
        seed: (default: -1)
            RNG seed. If negative value is passed (which is the
            default), then seed will be randomly generated by
            `np.random.rand(2**20)`.

    Output:
        Generator which returns samples of inter-event time.

    Examples:
        ```
        >> from taudiff import fractional_model
        >> tsg = fractional_model(sigma=1e-2, hurst=0.75, n_points=16,
            seed=123)
        >> print(next(tsg))
            0.50927
        >> print(next(tsg))
            0.50438
        ```
    """
    if seed < 0:
        np.random.seed()
        seed = np.random.randint(2 ** 20)
    tau = tau_0
    lb = boundary
    ub = 1 - boundary
    # NOTE: This is why inter-event time generators require passing
    # number of points, which can be sampled from the generators -
    # we can generate only fixed number of fGn samples. To allow for
    # reasonable flexibility and universal interface, the same
    # limitation should be implemented in other inter-event time
    # generators
    noise = sigma * generate_fgn(n_points, hurst=hurst, seed=seed)
    for n in noise:
        tau = tau + n
        tau = max(min(tau, ub), lb)
        yield tau
